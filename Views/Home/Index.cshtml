@{
    @using Microsoft.AspNetCore.Identity
    @inject SignInManager<IdentityUser> SignInManager
    ViewData["Title"] = "Home";
    IEnumerable<PostInfoModel> Posts = ViewData["Posts"] as IEnumerable<PostInfoModel>;
}

<script>
    const postIds = [];
</script>

<div class="text-center">
        @{
        if(SignInManager.IsSignedIn(User)) {
            <h2 class="display-4">Welcome to Twilite, <span class="text-primary">&#x40;@User.Identity.Name</span></h2>
        }
        else {
            <h2 class="display-4">Welcome to Twilite</h2>
        }
        }
</div>

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center my-3">
        <div class="col-4 display-6">Posts</div>
        @{
            if(SignInManager.IsSignedIn(User)) {
                <a class="btn btn-primary" asp-controller="post" asp-action="CreatePost">
                    <i class="mx-2 bi bi-pencil-square"></i>Create a New Post
                </a>
            }
        }
    </div>
</div>

<div class="container-fluid">
    <div id="posts-area" class="row justify-content-center">
        @foreach(var Post in Posts) {
            @await Component.InvokeAsync("Posts", Post)

            <script>
                postIds.push(@Post.PostId);
            </script>

        }
    </div>
</div>

<script src="~/js/Notifications.js"></script>
<script src="~/js/Post.js"></script>
<script src="~/js/Share.js"></script>